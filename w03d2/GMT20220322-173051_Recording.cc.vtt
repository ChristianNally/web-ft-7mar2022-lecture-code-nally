WEBVTT

00:00:00.000 --> 00:00:12.000
We should get started welcome to week. 3 day 2 today. we're going to talk about Crud with express just a bit of a rundown of what we're gonna look at.

00:00:12.000 --> 00:00:17.000
We're gonna set up a basic express server which it sounds like you guys are familiar with, which is great.

00:00:17.000 --> 00:00:33.000
We're going to talk a bit. about middleware and routes and templates, and how to get all those things to hold together for the creation of a web app I mean it is why you're here at boot camp after all, is to learn

00:00:33.000 --> 00:00:43.000
precisely this. right? So why shouldn't we get into it by week, 3 day, 2, right in fact, today.

00:00:43.000 --> 00:01:01.000
Marx, the first time that I should be able to show you let's just see this local hosts days.

00:01:01.000 --> 00:01:11.000
Yes. Oh, it has to be let's try this I think I had it as Http S.

00:01:11.000 --> 00:01:24.000
Yes, I did. Okay, we're going to dig into this tool this is a app that I'm.

00:01:24.000 --> 00:01:35.000
Building where you can see the learning objectives for the boot camp.

00:01:35.000 --> 00:01:41.000
I showed by show of hands. Have I showed you this diagram yet? No.

00:01:41.000 --> 00:01:59.000
Okay, So this is a tool where i'm basically gathering the learning objectives for the boot camp in one place where these are the the questions that I teach you how to answer effectiveness.

00:01:59.000 --> 00:02:03.000
Right, and you know, How do you define an arrow function?

00:02:03.000 --> 00:02:06.000
What is moca? what is chai? and so on?

00:02:06.000 --> 00:02:09.000
These questions that i'm feeding to you before the beginning of your lectures, I'm.

00:02:09.000 --> 00:02:13.000
Gathering them in a web app of my own. Yeah.

00:02:13.000 --> 00:02:17.000
And I'm gonna make the source code available for this thing with all of its data.

00:02:17.000 --> 00:02:26.000
And so you guys can use this as a way of like studying for tech interviews or just reviewing things and finding quick bugs solutions right?

00:02:26.000 --> 00:02:35.000
It's our own little private tiny little version of stack overflow except highly customized to boot camp stuff.

00:02:35.000 --> 00:02:46.000
Yeah, now, it's going to grow bit by bit maybe at some point we'll have you know, people contributing their own questions and answers to it right for things that they find running along throughout boot camp so far.

00:02:46.000 --> 00:02:53.000
I've got about a 100 and and change questions and answers in here.

00:02:53.000 --> 00:03:02.000
They're all sorted by the day of the boot camps. So different. curriculum days, like today, for example, is week, 3 day 2.

00:03:02.000 --> 00:03:08.000
Here is the set of questions and answers which we'll see a little bit more of in a minute.

00:03:08.000 --> 00:03:35.000
But the one thing that I want to show you all is this diagram which for me captures the entirety of Boot camp in a way, what it is, is diagram of all of the things that are going on inside all of the computers that are

00:03:35.000 --> 00:03:46.000
associated with all of the computation that happens from one click of a web app until the next click of a web app. right?

00:03:46.000 --> 00:03:52.000
So imagine you're sitting in front of a web app and you're using it, and you click once fine you get a page.

00:03:52.000 --> 00:03:59.000
A bunch of stuff is gonna happen, and then you can click another link.

00:03:59.000 --> 00:04:08.000
So, for example, let's say the first request is made because you just type a Url into a browser.

00:04:08.000 --> 00:04:17.000
Right. What the computer will do is take that request. Send it off to a web server.

00:04:17.000 --> 00:04:23.000
The web server will form a response and return that response to your browser.

00:04:23.000 --> 00:04:34.000
You've gone through the loop once by doing that Okay, then, let's say that you click a link on that web page. right?

00:04:34.000 --> 00:04:45.000
That's going to form a new request which is Going to go back out to the web server, which is going to build a response, and then the browser is going to build that response right? you've gone around the loop again.

00:04:45.000 --> 00:04:58.000
Now let's get into it a little bit more detail this time let's say you click another link, so that's going to form a request which is in the form of a url and Http verb and maybe some

00:04:58.000 --> 00:05:15.000
cookie values all that stuff is gonna get shipped off to the web server where and if you're using it express back end, there'll be some middleware that runs it'll do some routing it'll interact with a

00:05:15.000 --> 00:05:27.000
database. Perhaps It'll build a template and that will form the response that a web server creates in the form of Html Css.

00:05:27.000 --> 00:05:33.000
Javascript, a status code for the response, and potentially, some new cookie values.

00:05:33.000 --> 00:05:43.000
That response gets sent to the Web client where the web client will do layout and styling using the Css.

00:05:43.000 --> 00:05:51.000
It'll render the page it'll run Client-side Javascript, and then perhaps they'll be an Ajax request.

00:05:51.000 --> 00:05:56.000
Perhaps the user will click either way you've got around the loop one more time again.

00:05:56.000 --> 00:06:06.000
So this diagram is the entire boot camping a nutshell right?

00:06:06.000 --> 00:06:20.000
Every piece of technology that you learn going forward you should be able to find a box to put that knowledge in somewhere on this diagram, right?

00:06:20.000 --> 00:06:23.000
It's just a way of organizing all the things that happen from because beginning to end.

00:06:23.000 --> 00:06:28.000
So i'd be interested in hearing your feedback eventually you know a few weeks from now.

00:06:28.000 --> 00:06:34.000
Does this diagram help? when you learn new info, you know.

00:06:34.000 --> 00:06:41.000
Where is this occurring in the life cycle of all the stuff that can happen between clicks on the web?

00:06:41.000 --> 00:06:45.000
Right when people come to to Boot Camp to start with.

00:06:45.000 --> 00:06:54.000
They often have no idea all of the tremendous number of acronyms and different bits of technology that are happening between 2 clicks of a web app.

00:06:54.000 --> 00:07:08.000
Right. It is astounding. Many different little things, programs, inputs, processing and output are happening in a chain to get from one click to the next right.

00:07:08.000 --> 00:07:17.000
But by the end of this boot camp you'll have lots of context for each of the little bits of acronyms along the way.

00:07:17.000 --> 00:07:25.000
Yeah, So that's very much what today's class is about is actually this the blue part here? right?

00:07:25.000 --> 00:07:29.000
We're gonna talk about middleware we're gonna talk about routing.

00:07:29.000 --> 00:07:39.000
We're going to gloss over, the database stuff, although I will mention it in the context of tiny app how we approach the database stuff within tiny app.

00:07:39.000 --> 00:07:44.000
And then finally, how to build a template. Right? So today is a big deal. Right today.

00:07:44.000 --> 00:07:50.000
We cover like fully. What is this 120 degrees of this circle?

00:07:50.000 --> 00:08:08.000
All right. Very good. So with all that in mind we're gonna set up the basics of an express server, we're gonna talk a little bit about middleware how it runs, we're going to talk about routing and then ejs templates

00:08:08.000 --> 00:08:11.000
and the rest of this is all to do with ejs templates.

00:08:11.000 --> 00:08:16.000
I've set these up here in the order that they happen on the back end, right?

00:08:16.000 --> 00:08:21.000
Because the Middleware runs first. then the routing happens, and then the Egs template is is built.

00:08:21.000 --> 00:08:33.000
We'll talk about what those are and take it. from there. Any questions before we start any questions about vocabulary or language, or anything like that.

00:08:33.000 --> 00:09:02.000
So all right, So const express equals require express. so that very much the line.

00:09:02.000 --> 00:09:05.000
Let me just move this off to the side for a second.

00:09:05.000 --> 00:09:20.000
That starts it all off for us right we're gonna bring in code from an outline library.

00:09:20.000 --> 00:09:34.000
Thanks to Npm right and to get the basics going we're going to start out with the following const equals expression.

00:09:34.000 --> 00:09:53.000
So when you look at code like this What you're reminded of is this: it's that the require from a given package actually runs the code from that package. Whatever is in the module dot exports here gets returned to this

00:09:53.000 --> 00:09:57.000
thing this thing, It turns out as you can see here is a factory function.

00:09:57.000 --> 00:10:02.000
It's a function that's going to build an app for us and return it as an object.

00:10:02.000 --> 00:10:32.000
And so now that we have that object available to us let's get the minimum that we need in order for this app to actually be listening for requests, app Dot, Listen. it's going to take a port number when the listen is set up here is

00:10:37.000 --> 00:11:07.000
a callback. right? This callback is going to be executed when listening is ready to go. and so we can just say, console dot log, and let's use a template server is listening on port equals like So okay, that means we

00:11:07.000 --> 00:11:13.000
need a port number, and so let's make one const port equals.

00:11:13.000 --> 00:11:21.000
Oh, I don't know 3 3 3 3 just to make sure we don't collide with anything else.

00:11:21.000 --> 00:11:27.000
Whatever that number is is going to get used down here, and we should see Server is listening on that port number.

00:11:27.000 --> 00:11:48.000
Okay, so that's the basics getting the single listening in the first place, in order to see any evidence that this is actually doing anything.

00:11:48.000 --> 00:12:01.000
Let's set things up so that it can pay attention to at least one route. and so for that, let's do app Dot get right.

00:12:01.000 --> 00:12:09.000
That'll be the function Call that we make to set up a effectively a listener for a specific route.

00:12:09.000 --> 00:12:15.000
The route that we'll start out with is just the homepage at Slash.

00:12:15.000 --> 00:12:30.000
Yeah. And so here we put in, call back right. And this callback is going to take request and response as objects like.

00:12:30.000 --> 00:12:43.000
So to start. let's just console log so that we can see that it's active , right homepage has been requested, like.

00:12:43.000 --> 00:12:55.000
So all right, that should be the very smallest web app we could possibly make.

00:12:55.000 --> 00:12:59.000
And it isn't even actually returning anything it's just gonna console log when we get the request.

00:12:59.000 --> 00:13:12.000
So let's try this out i'm going to bring back in our code.

00:13:12.000 --> 00:13:25.000
And so if we look at the server js file this is the file that I've just been editing right nothing up my sleeve. let's run it, and I suspect we're gonna error out here, yeah

00:13:25.000 --> 00:13:31.000
cannot find module express right. We don't have an npm infrastructure here yet.

00:13:31.000 --> 00:13:37.000
We don't have a package json file That's associated with this file, so let's get that started Npm in it.

00:13:37.000 --> 00:13:48.000
Package name week, 3 day 2, Yeah. sure. How about Crud?

00:13:48.000 --> 00:13:58.000
With express. Oh, only you are all friendly stuff, fine crud with express version.

00:13:58.000 --> 00:14:05.000
One description. There we go crowd with express in full entry point.

00:14:05.000 --> 00:14:07.000
It found server on Js. for us we're not going to do any test commands.

00:14:07.000 --> 00:14:16.000
We're not gonna do it. Get repository lighthouse lab or Crud Express for keywords.

00:14:16.000 --> 00:14:22.000
Author me license. Is this fine? Yes, so we have that basic stuff.

00:14:22.000 --> 00:14:30.000
There now, and now we have package out, Json, which has that stuff that I just typed.

00:14:30.000 --> 00:14:35.000
It same old, same old everybody familiar with this We're not going to dwell on it all right.

00:14:35.000 --> 00:14:40.000
Npm install, or I can just write I same. Npm.

00:14:40.000 --> 00:14:45.000
Install express double dash, Save is going to include it in the package.

00:14:45.000 --> 00:14:50.000
Json for further distribution of this code I share the code around.

00:14:50.000 --> 00:14:58.000
Somebody else can take in the code and just type npm install with no arguments, and it's going to bring in all the packages that it needs.

00:14:58.000 --> 00:15:08.000
Having done this, we get a node Modules directory, including express and everything that expressed depended on, and everything that those dependencies depended on, and so on.

00:15:08.000 --> 00:15:14.000
We end up with a fair number of packages right here is expressed.

00:15:14.000 --> 00:15:21.000
So now, with that stuff in place, I can now go back to run the server.

00:15:21.000 --> 00:15:26.000
4, 3, 3, 3, 3, just like we typed it into the file.

00:15:26.000 --> 00:15:35.000
We bring back chrome and open a new tab and go local hosts 3, 3, 3, 3.

00:15:35.000 --> 00:15:50.000
This is the homepage right so i'll hit that and notice this thing goes round and round doesn't respond it's because the server's not responding to us so if you see that happening that's what's going

00:15:50.000 --> 00:16:05.000
on. let's look at the console log sure enough homepage has been requested right that happened directly, because this request was being made.

00:16:05.000 --> 00:16:19.000
So let's get this on one side of the screen let's get this on the other side of the screen, and if I control c.

00:16:19.000 --> 00:16:31.000
There. that's not doing anything at the moment all right so back to the code.

00:16:31.000 --> 00:16:43.000
We could do something like response. Dot, send homepage like that.

00:16:43.000 --> 00:16:55.000
Go back here, restart the server and then there now we're actually getting some text.

00:16:55.000 --> 00:17:01.000
And if we were to see this thing actually, let me make that small again.

00:17:01.000 --> 00:17:10.000
You can see now that when I load this it loads it and it comes back, and it doesn't sit here spinning like that. right?

00:17:10.000 --> 00:17:36.000
That's because we actually finished the response. Okay, So next up we want to start taking this shell of an express app and tart and start to flesh it out and add more stuff to it to make a more and more robust

00:17:36.000 --> 00:17:43.000
cycle through the back end so that we can do more and more things we're going to add a bit of middleware.

00:17:43.000 --> 00:17:49.000
We're going to add some more routes we're gonna play around with a fake database today.

00:17:49.000 --> 00:17:59.000
Then we'll build some templates as well as part of today. In fact, the number of routes that we're going to put together.

00:17:59.000 --> 00:18:11.000
We're gonna do at least 4 the idea here is to be able to make a route for managing an entity.

00:18:11.000 --> 00:18:25.000
Oh, I don't know maybe like tiny urls right or any other thing that you might like to be managing a widget any commerce product blog posts right.

00:18:25.000 --> 00:18:34.000
Let's get into it. alvin's question shouldn't this diagram: Have a branch that responds to errors.

00:18:34.000 --> 00:18:43.000
In fact, the error response might be the response, or it might not be right.

00:18:43.000 --> 00:18:50.000
Like if I click on something and an error happens that could be the html that comes back to the user.

00:18:50.000 --> 00:18:54.000
That's one way to handle errors other errors.

00:18:54.000 --> 00:19:03.000
See the web server writing information to a log for debugging on the back end only, and then a more helpful response.

00:19:03.000 --> 00:19:08.000
Sorry something went wrong. Please contact the administrator you know to the user.

00:19:08.000 --> 00:19:13.000
That's how errors get handled in General Okay,

00:19:13.000 --> 00:19:23.000
So I want to go back to these slides and I want to look at one of today's learning objectives crud we're talking about.

00:19:23.000 --> 00:19:31.000
Crud are people cool with what Crud stands for?

00:19:31.000 --> 00:19:35.000
Do people know? Yes, you've seen this bread how about bread?

00:19:35.000 --> 00:19:54.000
No? Okay, so bread and crud they're kind of they're acronyms for the same thing right bread's got an extra letter Crud create, read update and delete bread on the other hand, has an r

00:19:54.000 --> 00:20:04.000
for read e is for up edit, which is Cruds update is breads edit. right?

00:20:04.000 --> 00:20:13.000
So brad browse read edit add and Delete ad is is breads version of the sea from Crud.

00:20:13.000 --> 00:20:16.000
You want to create a thing that's kind of like adding a thing right?

00:20:16.000 --> 00:20:23.000
You want to add a url right? You can use a from bread right?

00:20:23.000 --> 00:20:29.000
The only difference with bread is that you get this one called browse.

00:20:29.000 --> 00:20:34.000
Browse is really like reed except it's read all of them.

00:20:34.000 --> 00:20:46.000
So if you've got lots of tiny urls then your browse route would return a list of all the tiny Urls to you right If you're writing an e-commerce site or a blog website,

00:20:46.000 --> 00:20:54.000
Browse is going to return to you a list of all the blog posts, so that's just an extra route to consider.

00:20:54.000 --> 00:20:57.000
I like I mean who doesn't like bread more than Crud.

00:20:57.000 --> 00:21:16.000
Personally, i'm a big fan of bread right and it gives you a bit of extra stuff to think about for your routes either way. let's write some of these up and which you know that begs the question what are

00:21:16.000 --> 00:21:24.000
we gonna write, let's make a database entry in our code.

00:21:24.000 --> 00:21:37.000
Let's say, for example, that we're going to be managing different types of fruit.

00:21:37.000 --> 00:21:42.000
I don't know who has suggestions for the type of entity that we want to manage today.

00:21:42.000 --> 00:21:50.000
What do we? What do we want to manage? learning objectives for the boot, camp?

00:21:50.000 --> 00:22:01.000
Bread types, thank you nicole let's go for bread types. cons.

00:22:01.000 --> 00:22:10.000
Let's make a database yeah Oh, you just want the non video at the break.

00:22:10.000 --> 00:22:21.000
Right that's what that's what you're on about I i'm on dea Okay, how about an array of bread types.

00:22:21.000 --> 00:22:27.000
Then bread types and it'll start out will it start out blank.

00:22:27.000 --> 00:22:33.000
No, it's gonna have none right away. yeah what else how do you spell banic.

00:22:33.000 --> 00:22:38.000
I'm sure that's not how you spell it but it'll be a placeholder.

00:22:38.000 --> 00:22:46.000
Baghett! Yes, clearly a type of bread sourdough, Parma nickel.

00:22:46.000 --> 00:22:57.000
Thank you here. now, we're talking sourdough it's our due, etc.

00:22:57.000 --> 00:23:05.000
Okay, People didn't come here to watch me type all right so create, read, update and delta.

00:23:05.000 --> 00:23:19.000
Let's build these routes. shall We Now about read if real, is for an individual entity.

00:23:19.000 --> 00:23:24.000
We're going to need a number on that entity to be able to read it.

00:23:24.000 --> 00:23:36.000
Typically the Urls for a read read looks something like this breads slash 3.

00:23:36.000 --> 00:23:40.000
Maybe you've seen this on your websites before you'll go to a given website.

00:23:40.000 --> 00:23:50.000
The Url that you're accessing is some path slash and Id no okay.

00:23:50.000 --> 00:23:54.000
So in our case, breads 3, we would want it to return to us.

00:23:54.000 --> 00:23:59.000
Baguette. Yeah, I'm trying to say that like the flight of the Concords.

00:23:59.000 --> 00:24:03.000
Have you seen that thing i'll post it afterwards that's good.

00:24:03.000 --> 00:24:18.000
It's good stuff. breads 3 that's what our read route is going to look like let's make it so app dot get right.

00:24:18.000 --> 00:24:26.000
There's a complete function. Call back my cursor up to put in the arguments.

00:24:26.000 --> 00:24:30.000
The parameters. So we're gonna have a parameter like so.

00:24:30.000 --> 00:24:39.000
And then a call back right. This is the callback that will get run when that route is fired.

00:24:39.000 --> 00:24:56.000
The path needs to be breads slash now i'm not going to put 3 here, because that's a very specific.

00:24:56.000 --> 00:25:07.000
I want to put a token a placeholder a thing that's gonna match with anything that goes in that slot.

00:25:07.000 --> 00:25:15.000
And the trick for that is, Colon. Id if you put a colon in in front of the word.

00:25:15.000 --> 00:25:33.000
Then that's a message to express that says this is a placeholder, whatever the person types in there for the route, whatever the link has in it, it's going to match anything that's in that part of the url right so there's a little

00:25:33.000 --> 00:25:41.000
bit of dynamic content that's going on here this route is gonna fire, no matter what word shows up there.

00:25:41.000 --> 00:25:50.000
Okay, The callback needs to take. Excuse me, request and response.

00:25:50.000 --> 00:25:59.000
Drop the cursor between the curly braces hit enter right it's just white space that makes this triplet of characters look like the ending bracket.

00:25:59.000 --> 00:26:08.000
If you will, to this whole line any line I put at 26 that's like blank slate.

00:26:08.000 --> 00:26:12.000
This is code that's going to run when that route fires.

00:26:12.000 --> 00:26:27.000
So I mean you know. let's just test this out to start with with some stuff.

00:26:27.000 --> 00:26:36.000
Let's say read has been requested we're gonna send just the word read.

00:26:36.000 --> 00:26:51.000
Okay, i'll save that like that. Go back to the server restart the code back to here by reload the homepage.

00:26:51.000 --> 00:26:54.000
The server tells me the homepage has been requested.

00:26:54.000 --> 00:27:07.000
Fine. If I go back here and go slash threads. Slash 3 read right.

00:27:07.000 --> 00:27:20.000
We got it. That route actually fired. The question, though, that I can hear you all wondering is, what about the 3, and how am I going to get access to that 3?

00:27:20.000 --> 00:27:33.000
Well, dear Audience: member, that number is accessible in the request.

00:27:33.000 --> 00:28:03.000
Yeah, this object request right here so let's grab it i'm gonna say convert this into templates like so read bread number dollar sign like this we're going to interpolate the value that's coming

00:28:04.000 --> 00:28:10.000
out of the request. Object, drum roll, please rack dot params dot.

00:28:10.000 --> 00:28:17.000
Id so recto parabs is the thing and rack dot params.

00:28:17.000 --> 00:28:32.000
Well, that's actually console log it separately right here I am with all my labels on my console logs that I can tell what i'm looking at rec dot frames and let's write out rack thought

00:28:32.000 --> 00:28:42.000
frames, and see what's in it actually that might just say object, let me grab that out of here and do it that way.

00:28:42.000 --> 00:28:52.000
That's better. there. we don't mean that anymore there if we're gonna send.

00:28:52.000 --> 00:28:58.000
Read back, Why don't we send back a template text instead?

00:28:58.000 --> 00:29:15.000
That has the actual number in it as well like so back here, restart the server back to this here's breads 3 reload it, sure enough.

00:29:15.000 --> 00:29:19.000
I get read 3 No, directly in the Html itself.

00:29:19.000 --> 00:29:30.000
If I go back to the console log it's showing rack, dot params wreck dot prams is object right?

00:29:30.000 --> 00:29:33.000
You can see the curly brace right there in the console log output rack.

00:29:33.000 --> 00:29:40.000
Dot prems is an object. It holds, however, many items out of the Url as is needed.

00:29:40.000 --> 00:29:46.000
There can be multiple, and they're gonna show up in here as properties of rect. God forbes.

00:29:46.000 --> 00:29:55.000
The, For example, if you were, if you needed to have more than one Id number on your Url.

00:29:55.000 --> 00:30:08.000
I could go second. Id like so, and then go back here, restart it, Go back to my browser.

00:30:08.000 --> 00:30:15.000
3 slash 55 fine. it still says, read 3, but on the console log.

00:30:15.000 --> 00:30:20.000
See how second Id showed up. Now rack Dot Params right.

00:30:20.000 --> 00:30:23.000
It holds all of the params from the Url.

00:30:23.000 --> 00:30:44.000
Okay. I know that there's a lot of flipping back and forth between the console and the browser and the code right? That That can be a little bit challenging to follow along what are I would have just

00:30:44.000 --> 00:30:49.000
review what we just did. So this a little bit less, you know. flash andinducing trauma.

00:30:49.000 --> 00:30:57.000
You know what I mean. let's bring up the code make as much screen real estate for that as we can.

00:30:57.000 --> 00:31:12.000
We're gonna bring up the restarting the server like so. and so.

00:31:12.000 --> 00:31:20.000
Let's read through this. let's read through this from the point of view of a synchronous javascript.

00:31:20.000 --> 00:31:32.000
Right line. One pretty straightforward sets up a cost at 3, 3, 3, 3 street. next up.

00:31:32.000 --> 00:31:40.000
Pull up the express Npm package use that factory function to produce an app line.

00:31:40.000 --> 00:31:50.000
7. make an array of bread types it's just a static array with some values in it Next up.

00:31:50.000 --> 00:31:58.000
Let's make some routes app dot get with a path and a callback.

00:31:58.000 --> 00:32:03.000
This is a function call. Does this function get called right now?

00:32:03.000 --> 00:32:08.000
Yes, absolutely it does. Does it have a synchronous side effects?

00:32:08.000 --> 00:32:14.000
Absolutely the asynchronous side effect is when the event loop starts.

00:32:14.000 --> 00:32:19.000
Set yourself up to listen for this route to be hit.

00:32:19.000 --> 00:32:24.000
Is it going to run this code right now? No, not at all.

00:32:24.000 --> 00:32:29.000
That code. Will this callback will only run when that route gets hit? right?

00:32:29.000 --> 00:32:34.000
You're seeing why we taught asynchronous javascript.

00:32:34.000 --> 00:32:38.000
It's so that things can arrive on human time instead of on computing time.

00:32:38.000 --> 00:32:48.000
All right here's another route same deal app dot get the path that it's going to pay attention to let me clean this up so that we don't use the second parameter anymore.

00:32:48.000 --> 00:33:01.000
Right here's a path, and this path has a token in the path where this path will match any request to breads slash.

00:33:01.000 --> 00:33:08.000
Id number this path matches the request. Then this callback will get fired.

00:33:08.000 --> 00:33:12.000
It will console log, wreck up prams just so that we can see what the value looks like.

00:33:12.000 --> 00:33:18.000
It console logs the particular number Id coming out of that path like.

00:33:18.000 --> 00:33:28.000
So, and then finally res. Dot Send sends some text back to the user just to make sure that the request gets completed.

00:33:28.000 --> 00:33:32.000
Does this code run right now, while i'm parsing the main thread?

00:33:32.000 --> 00:33:39.000
Not at all. Does this sorry? Does this function get called Yes, absolutely it's just a simple function.

00:33:39.000 --> 00:33:44.000
Call right. it's a function call that has a synchronous side effects.

00:33:44.000 --> 00:33:48.000
It sets up a listener for this route on the event.

00:33:48.000 --> 00:33:57.000
Loop when the event loop starts. Okay, keep going through the main thread.

00:33:57.000 --> 00:34:10.000
We get to the bottom app, Dot. listen. This sets up the app to be listening for stuff on the Internet, and so it claims a certain port.

00:34:10.000 --> 00:34:16.000
It tries to claim a certain port number that port is free and available.

00:34:16.000 --> 00:34:23.000
Then this comes back and tells us that that has been successful.

00:34:23.000 --> 00:34:29.000
The server is listening on such and such a port right now.

00:34:29.000 --> 00:34:36.000
App Dot. Listen! People say that's an asynchronous function.

00:34:36.000 --> 00:34:45.000
Does App Dot? Listen. Get called right now. Absolutely. It gets called with a port number and a callback.

00:34:45.000 --> 00:34:55.000
Is this callback going to be called right now? no right because the stuff on the event loop can't start until the main thread has finished.

00:34:55.000 --> 00:35:04.000
Right. So line 41 gets called and lo and behold that's the end of the main thread.

00:35:04.000 --> 00:35:21.000
The main thread stops. Now the event loop can start, and the event loop has a bunch of stuff that's been scheduled onto it, one of which is to start up the server as listening so it does that and if it succeeds then This

00:35:21.000 --> 00:35:28.000
callback will run that's why we see this statement on the console log.

00:35:28.000 --> 00:35:37.000
It's because that thing actually ran on the event loop Meanwhile the event loop is still going because it's listening for these routes right?

00:35:37.000 --> 00:35:43.000
I Haven't got my cursor back the server runs listening for routes.

00:35:43.000 --> 00:35:49.000
Either one of these routes can get hit, and the associated callback would run right.

00:35:49.000 --> 00:36:11.000
So if I flip over to here here, and I access say breads, 5 cannot get breads 5, why would this be?

00:36:11.000 --> 00:36:38.000
That's an interesting one. Did I Miss type the url I must have saved it.

00:36:38.000 --> 00:36:53.000
Weird it looks saved right if it weren't saved this would be a white dot.

00:36:53.000 --> 00:36:58.000
Let me just try another line here. See that's unsafe here.

00:36:58.000 --> 00:37:03.000
It is saved app dot get slash breads. Colon.

00:37:03.000 --> 00:37:10.000
Id restart the server. Maybe that was it if the code changes. You have to restart the server.

00:37:10.000 --> 00:37:17.000
Let's try that I forget. Did I restart the server That must be it, actually.

00:37:17.000 --> 00:37:26.000
Yeah, okay, this is going to be a good segue into some middleware that we're going to choose to run here in a second, Right?

00:37:26.000 --> 00:37:36.000
No demon node man. Okay, right? So Nicole, go ahead.

00:37:36.000 --> 00:37:45.000
So usually, I think the other day there they were, talking about the event like, yeah, one something who was into the event loop.

00:37:45.000 --> 00:37:50.000
And then the events, half it like leaves the event loop.

00:37:50.000 --> 00:37:54.000
But in this case does it always stay in the event? Loop: Yeah.

00:37:54.000 --> 00:38:02.000
So the case where you're talking about when the event happened then it was done.

00:38:02.000 --> 00:38:06.000
I think that was set time out is an example of that.

00:38:06.000 --> 00:38:18.000
Where when you call set timeout that's a callback that's going to happen only once another example of that would be reading a file.

00:38:18.000 --> 00:38:33.000
So if you do, the Fs dot read file that schedules some stuff to happen on the event. Loop reading a file is the thing that happens only once, right. and so the event loop would finish say if it was done all of its

00:38:33.000 --> 00:38:39.000
events. But there are other examples of events that you can schedule on the event loop that happen over and over and over again.

00:38:39.000 --> 00:38:45.000
For example, set interval, you have any exposure to sat interval yet.

00:38:45.000 --> 00:38:47.000
Yeah, Okay, so that's an example of it'll call the callback.

00:38:47.000 --> 00:38:52.000
But then it's gonna keep going on the event loop and call it again.

00:38:52.000 --> 00:39:01.000
Some number of milliseconds again later right and so This one that we're looking at here is more similar to that kind of a thing that's being scheduled on the event loop.

00:39:01.000 --> 00:39:09.000
It says, Listen for this route. Yes, but then keep listening for this route over and over again.

00:39:09.000 --> 00:39:30.000
Yeah. great question. good, all right. That's a route that responds to the Url slash breads slash, Colon.

00:39:30.000 --> 00:39:44.000
Id. This response is thoroughly boring and is only text, and is not very maintainable.

00:39:44.000 --> 00:39:54.000
It doesn't have anything to do with html the time has come to introduce templates into what we're doing.

00:39:54.000 --> 00:40:08.000
I'll quickly go back to the diagram if I go back to slash cycle.

00:40:08.000 --> 00:40:20.000
This diagram. We have middleware and routes and database and template.

00:40:20.000 --> 00:40:27.000
The thing I want to introduce next is this last step: templates what they are, how they work!

00:40:27.000 --> 00:40:39.000
How to use them all of that stuff so let's do that in the code.

00:40:39.000 --> 00:40:53.000
I want to grab some boilerplates stuff, and it goes a little bit like this.

00:40:53.000 --> 00:41:03.000
Okay, Ejs Templates We're gonna set up a thing called an E.

00:41:03.000 --> 00:41:20.000
Js Template. And first things first we actually need to add this a package that we're gonna have available to us.

00:41:20.000 --> 00:41:26.000
And so i'm gonna go npm install egs and then save it to the package.

00:41:26.000 --> 00:41:38.000
Dot Json, Egs: a technology that allows you to fold dynamic values into the middle of some html.

00:41:38.000 --> 00:41:50.000
So with it available to us here that now is going to show up inside package.

00:41:50.000 --> 00:42:06.000
Json as a dependency. Okay. Another step that we need to take is to make a directory called Views.

00:42:06.000 --> 00:42:15.000
So the views directory. Now it's going to show up over here, right the views Directory I could have made it through this Ui instead.

00:42:15.000 --> 00:42:29.000
I want it with a views directory. Now I can make a file inside that views Directory here's how I would do it on the command line views.

00:42:29.000 --> 00:42:35.000
Let's say let's call it read actually it reeve ejs.

00:42:35.000 --> 00:43:00.000
So with that file in place. Now we'll find that it's over here inside the views directory, and I would like for views, too, for the read ejs template to have some boilerplate

00:43:00.000 --> 00:43:08.000
Html to start with. Have people seen that trick when you start out typing.

00:43:08.000 --> 00:43:13.000
Html colon 5 Pick the thing with the tab key it brings in the boilerplate.

00:43:13.000 --> 00:43:26.000
Html: Okay, So this is going to be the read route, and I'm going to give the title in the in the head tag.

00:43:26.000 --> 00:43:37.000
There's going to be the title of the page that's going to be read to correspond to the route that we're making. and so we're dealing with bread types.

00:43:37.000 --> 00:43:54.000
Right. So let's say the type of bread with Id equal something is something else.

00:43:54.000 --> 00:43:59.000
Now, what about these? Some things? Notice the extension on this file?

00:43:59.000 --> 00:44:13.000
Dot ejs yet So far all i've typed is Html could have put Dot html on this thing as a as the ending part of the file.

00:44:13.000 --> 00:44:20.000
Name, but really it's an egs file and what I'm. about to type what makes it special as an E. Js.

00:44:20.000 --> 00:44:38.000
Template file. The following is not strictly Html, but it is ejs i'm going to put in what i'm calling an alligator clip here like so this is going to have a variable name inside

00:44:38.000 --> 00:44:47.000
it. it's a gonna be a javascript style, variable name. That variable name is going to sit inside this alligator click.

00:44:47.000 --> 00:44:49.000
So it starts with a less than sign, gets a percent sign.

00:44:49.000 --> 00:44:58.000
In this case it equals we'll talk more about that and it closes this tag with the percent sign, and then a greater than right.

00:44:58.000 --> 00:45:10.000
So there's one example of one of these types of tags that holds dynamic content inside this template the type of bread with Id equal.

00:45:10.000 --> 00:45:26.000
This is. And now we need the bread type so let's make another dynamic tag instead of Id we'll call it type like.

00:45:26.000 --> 00:45:36.000
So okay, So that is the content of the template file.

00:45:36.000 --> 00:45:50.000
We want to connect our server code up so that it pulls in that template file and populates it with the dynamic content that we needed to have right.

00:45:50.000 --> 00:46:05.000
If we go back to Server Dot js and here's our Route right now, instead of this Line that has resd send on it like this.

00:46:05.000 --> 00:46:23.000
We're going to change the way that it responds instead. we're going to say res dot render, and then read, That's the name of the Ejs template notice I didn't need to include dot

00:46:23.000 --> 00:46:43.000
ejs on it it's assumed now one last thing, because, as is this is not going to feed any of those dynamic values down into the template to do that we need to feed it.

00:46:43.000 --> 00:46:51.000
Those values, so that the template will have the dynamic values to use as part of the way that it renders the html.

00:46:51.000 --> 00:47:09.000
The way that that works is, we set up object often called template bars, and make it equal to an object object with properties that match the variable names.

00:47:09.000 --> 00:47:13.000
We just used on the template side in fact while i'm doing this?

00:47:13.000 --> 00:47:17.000
Why don't I use split mode on the editor?

00:47:17.000 --> 00:47:31.000
And this is a trick that you'll often find yourself. meeting here's the server code on one side. let's have the Ejs template on the other side.

00:47:31.000 --> 00:47:45.000
Okay, Now we're talking here I am on this side setting up my server in order to be able to use this exact template.

00:47:45.000 --> 00:47:53.000
Res render. Read it's going to look for this read ejs inside the Views Directory.

00:47:53.000 --> 00:48:01.000
This template needs 2 dynamic values, one called Id, and one called type.

00:48:01.000 --> 00:48:13.000
The way that we pass these values into the template is, we set them up as priorities of this template bars object.

00:48:13.000 --> 00:48:20.000
So what will be called Id the value of that is going to be wreck.

00:48:20.000 --> 00:48:30.000
Dot parameter. Id that's the value of this property comma now?

00:48:30.000 --> 00:48:41.000
Where are the types held up in this array? Red types? right?

00:48:41.000 --> 00:48:51.000
So the type dynamic value in my template needs to come out of that database bread type values.

00:48:51.000 --> 00:49:06.000
Here we have, them bread types so i'm going to go for bread types, but it's an array at that number like. So right.

00:49:06.000 --> 00:49:15.000
So, for example, if I go after the route, breads slash 3 that we want that to be 0.

00:49:15.000 --> 00:49:19.000
1, 2, 3. We want that to say sourdough right?

00:49:19.000 --> 00:49:29.000
And so the bread types at the third at the at the fourth index.

00:49:29.000 --> 00:49:33.000
Actually the 3 index. If you will right we're gonna go bread types of 3.

00:49:33.000 --> 00:49:42.000
It's gonna pull back the value sourdough and Sourdough is going to be the type that gets passed into the template.

00:49:42.000 --> 00:49:51.000
So think just for a moment about this template bars it's an object.

00:49:51.000 --> 00:50:00.000
It's an object that has properties those property names on this side of the equation.

00:50:00.000 --> 00:50:13.000
They're property names, but when they get passed into the template they turn into variable names on the other side through the looking glass.

00:50:13.000 --> 00:50:18.000
If you will, inside the template. Now, how do they get passed in?

00:50:18.000 --> 00:50:29.000
You pass them in as this a second parameter on the res dot render call just like that.

00:50:29.000 --> 00:50:53.000
So this now is our completed route. callback that sets up the values that you need to have, and feeds those values into the template like So once that's done, then when it comes time to actually create the

00:50:53.000 --> 00:51:01.000
Html. this callback will get called. These values will be assembled as values of the Id Template.

00:51:01.000 --> 00:51:14.000
Variable, the type template variable, right? Those are now going to be available. as the html gets constructed from this file and fed back as part of the response.

00:51:14.000 --> 00:51:21.000
I saw some questions, so Matt asks: Would this dot?

00:51:21.000 --> 00:51:32.000
Id work for the type index as well. this dot Id no, because this would be referring to this object.

00:51:32.000 --> 00:51:45.000
Oh, huh? I don't know let's try it later. it's a super interesting question to me would it work.

00:51:45.000 --> 00:51:49.000
I feel like it's not even populated yet like it doesn't exist.

00:51:49.000 --> 00:51:54.000
The object doesn't exist yet. so i'm gonna say i'm gonna guess.

00:51:54.000 --> 00:52:05.000
No, but I don't really know the answer it seems it's an interesting question, regardless the thing that we want to stay on track with is feeding values into the template which this is going to work template bars is

00:52:05.000 --> 00:52:09.000
an object gets handed in by the time you're over here on the template side.

00:52:09.000 --> 00:52:13.000
It's like Oh, i've got some values for Id and type.

00:52:13.000 --> 00:52:16.000
They came to the things that were fed into me okay so let's go back.

00:52:16.000 --> 00:52:37.000
Then now to the server. we'll run the server now we go back to here.

00:52:37.000 --> 00:52:49.000
Breads. 3 let's rerun this and this one thing back with how to set up your egs templates.

00:52:49.000 --> 00:53:14.000
There's one more thing that has to happen, and that is when you're setting up your express app like this, we actually need to run dot set , view engine Ejs: because it turns out that there are actually a variety of

00:53:14.000 --> 00:53:21.000
template languages that you can use with express there's one that's built in to express without needing any third party packages.

00:53:21.000 --> 00:53:36.000
I forget the name of it off the top of my head But we're actually adding in a egs templates as different 10 template hitting engine to use So with that line of place let's go back restart

00:53:36.000 --> 00:53:51.000
the server and reload this a voila, the type of bread with Id equal 3 is sourdough.

00:53:51.000 --> 00:53:57.000
Yeah, all right, Celebrate the victories you know if you have to celebrate the small winds when they come, you know.

00:53:57.000 --> 00:54:11.000
Okay, that's cool and check it out We have a web app that accepts dynamic content on the urls can drop in any one of the ids up here Right?

00:54:11.000 --> 00:54:23.000
Non. Oh, isn't that funny is not It is a number. I cannot intend to make that joke.

00:54:23.000 --> 00:54:29.000
Okay, one andy's gonna love this i'm gonna point him to this part of the video.

00:54:29.000 --> 00:54:39.000
Hi andy. Okay. bread Slash one bannock . bread. slash, 2 bagat Thank you to the flight of the Concords. Do we have a 4?

00:54:39.000 --> 00:54:42.000
I think we do nope we're not out that high yet.

00:54:42.000 --> 00:54:57.000
3. Sarado. Okay. cool, right it's a web app that takes dynamic Urls picks out pieces of the database, builds an ejs template from the dynamic values and shifts that back to

00:54:57.000 --> 00:55:01.000
the browser. right I think it's time to look back at the cycle.

00:55:01.000 --> 00:55:13.000
Now, here, right check this out here's the web server section We make a request of the web app we're gonna touch on middleware.

00:55:13.000 --> 00:55:19.000
I promise middleware would run first, then the route it picks, which route is going to respond.

00:55:19.000 --> 00:55:23.000
It accesses the database. We did that part this time.

00:55:23.000 --> 00:55:35.000
We actually pulled it out of the red types array to make some dynamic values, to feed into the template that then gets shipped back in the form of Html Css.

00:55:35.000 --> 00:55:42.000
And javascript to the web client for our rendering , and so on.

00:55:42.000 --> 00:56:03.000
So let's let's take a break right I think we're at that time we just celebrated our first victory of the day, and it's definitely a time for non-bred none so i'll steal that

00:56:03.000 --> 00:56:20.000
you, Url, the just grabbing the url for y'all copy.

00:56:20.000 --> 00:56:50.000
He just okay, take a real break. See all in about 10 min, and we will return with more routes and more crud and more bread for our express Apps, the any questions from what you picked up so far.

01:05:59.000 --> 01:06:15.000
And now i'm i'm sorry I think you explained this a while ago I just wanted a little more clarification on the wreck per rams right and that little there.

01:06:15.000 --> 01:06:25.000
So rec dot params dot, the the value is equal to the input that user puts on the Url Correct?

01:06:25.000 --> 01:06:30.000
Yes, okay, sorry, not correct. Dot. Params itself is an object.

01:06:30.000 --> 01:06:37.000
Yes, yes, that contains inside of it properties that match these token names, I see.

01:06:37.000 --> 01:06:45.000
Okay, if we look, for example, at the output of the server it's showing us wreck dot params each time. right?

01:06:45.000 --> 01:06:50.000
Preams itself as an object that has properties that match the token names. Right?

01:06:50.000 --> 01:06:55.000
Okay, Yeah, I was just really confused on this less today when I was doing short.

01:06:55.000 --> 01:07:06.000
Url. Okay, it makes total sense. Now, it's literally the object that it captures the the value inside an object of what we give it, as in the Url that that's right.

01:07:06.000 --> 01:07:12.000
That name Id that came from what we gave it right I could make that monkey fuzz it's gonna show up here as monkey fuzz right right totally.

01:07:12.000 --> 01:07:35.000
Thank you so much that clarifies everything good anything else. for Review. you know. let's get this middleware one taken care of right particular.

01:07:35.000 --> 01:07:39.000
I already ran into this issue with needing to restart the server.

01:07:39.000 --> 01:07:46.000
When I change my code. There's some middleware that can help out with that, actually, is it is it even middleware.

01:07:46.000 --> 01:07:51.000
That's a bit different. Yeah, anyway. we're gonna get it started.

01:07:51.000 --> 01:07:59.000
Anyway. let's get some node mon action in here so Npm.

01:07:59.000 --> 01:08:06.000
Install node mon do we need it let's include it and package on Json.

01:08:06.000 --> 01:08:24.000
Anyway. So what node man, Node Monitor, or, as some like to say, no demon is a different way to start your server.

01:08:24.000 --> 01:08:33.000
So before we were going node server like that, but with node Mod in place.

01:08:33.000 --> 01:08:39.000
Now we have an executable that's down inside the Node Modules Directory.

01:08:39.000 --> 01:08:56.000
Nodemond came in here. the way that npm and executables works. Is it will often make a directory called dot bin inside of node modules, and i'm gonna just show all the stuff that's in here

01:08:56.000 --> 01:09:04.000
these are executables that have come out of all the packages that we've installed nodemond being one of them.

01:09:04.000 --> 01:09:13.000
So I can actually run node man like that from that path.

01:09:13.000 --> 01:09:21.000
And then it's like running node except that if you're code choices.

01:09:21.000 --> 01:09:26.000
It's going to restart it for you right super handy so execute it that way.

01:09:26.000 --> 01:09:35.000
This time. And now, if I go back to my browser, hit read right.

01:09:35.000 --> 01:09:45.000
Get our sourdough back. It says as much right but if I go and change the code.

01:09:45.000 --> 01:09:51.000
So let's go to the server mean I don't know. Add a space and hit save I just changed the code.

01:09:51.000 --> 01:10:00.000
That's gonna go back here and restart due to changes and it automatically does the restart which is super handy.

01:10:00.000 --> 01:10:13.000
Right Then I wouldn't run into that problem that I ran into in the first half of the lecture, where I you know, had an error, and it was because it hadn't updated the server to be reruned kevin go

01:10:13.000 --> 01:10:22.000
ahead. Sorry I forgot to meet myself. Does that also work on the templates?

01:10:22.000 --> 01:10:31.000
Too super interesting turns out that templates are loaded fresh every time the route hits.

01:10:31.000 --> 01:10:40.000
So you can actually change egs template files the server doesn't need to restart because it's going to run.

01:10:40.000 --> 01:10:44.000
It's going to reload it fresh every time anyway.

01:10:44.000 --> 01:10:52.000
So does it work? Sure, we wouldn't even have needed node mod for that to work?

01:10:52.000 --> 01:11:03.000
Yeah, Thanks for the questions. Okay, now, onto some real middleware, because this is a bit different.

01:11:03.000 --> 01:11:06.000
This is a thing that's running how the node itself is running.

01:11:06.000 --> 01:11:15.000
Let's include some actual middleware so the middleware that I want to go after is called Morgan.

01:11:15.000 --> 01:11:21.000
So Npm install morgan and then again we'll save this as a dependency in our package.

01:11:21.000 --> 01:11:30.000
Json, and what Morgan does? Is it logs any time a route is hit.

01:11:30.000 --> 01:11:42.000
So in order to use it, though let's pull out the the line I need from the solution there.

01:11:42.000 --> 01:11:58.000
First up. we need to bring in the morgan package like this, and then this is how we set up the middleware, and i'll show that in the code next.

01:11:58.000 --> 01:12:05.000
So inside server, Dot: Js: we want to do this.

01:12:05.000 --> 01:12:13.000
Morgan require. Morgan brings in the contents of the Morgan package Right?

01:12:13.000 --> 01:12:20.000
It actually runs this code, and then it populates. this object, depending on whatever modules exports, is set inside of there.

01:12:20.000 --> 01:12:29.000
Once that's done. Then we set up that and this actually deserves a whole new section of the file.

01:12:29.000 --> 01:12:50.000
We're going to call this middleware like so and this one we're going to call database like so right. And so you're seeing some sections start to emerge from the file here.

01:12:50.000 --> 01:12:56.000
We've got the setup we've got middleware which is gonna run.

01:12:56.000 --> 01:13:03.000
We've got database and then the routes which we're going to populate some more routes here in a minute.

01:13:03.000 --> 01:13:18.000
Middleware is soft software that will run for every request that's what Middleware is.

01:13:18.000 --> 01:13:25.000
And so when you run a line app dot use Morgan Dev.

01:13:25.000 --> 01:13:32.000
This is going to get called every request right that's what app dot use?

01:13:32.000 --> 01:13:39.000
Does app dot get an app dot post as we'll see later.

01:13:39.000 --> 01:13:48.000
Those are route specific. So this callback only gets run if we request the homepage.

01:13:48.000 --> 01:13:51.000
This callback only gets run if we request the bread.

01:13:51.000 --> 01:13:56.000
Slash 3 or bread, slash 5 or that type of route, right?

01:13:56.000 --> 01:14:04.000
But this one gets run now on every one of the requests That's what Middleware is.

01:14:04.000 --> 01:14:10.000
Express hands off the request to all the Middleware. Then it comes back and does the routing.

01:14:10.000 --> 01:14:18.000
So now, if I go back and restart and let's just do it like that.

01:14:18.000 --> 01:14:28.000
We're going to use node mon this time so the Server has started up Now, when I go and hit a route there, I just reloaded that page.

01:14:28.000 --> 01:14:36.000
I go back to my console log. this line is now being output by Morgan.

01:14:36.000 --> 01:14:49.000
Okay, and it's a useful line It says the Http verb, the path that it responded to the Http status number that came back as a result of that request.

01:14:49.000 --> 01:14:56.000
Turns out it had been cached so the status number 304 corresponds to a cache. result going back.

01:14:56.000 --> 01:15:04.000
That's interesting debugging in and of itself Then we get how many milliseconds it took to assemble and send that response.

01:15:04.000 --> 01:15:11.000
A nice bit of debugging for us to have and we're gonna have that on every one of our routes going forward.

01:15:11.000 --> 01:15:15.000
If I go back now to the browser, and I select the homepage.

01:15:15.000 --> 01:15:24.000
For example, we have a route for that. Then I go back to the console. Right?

01:15:24.000 --> 01:15:36.000
It tells me yup you hit the the home page and we've got a nice been a logging and debugging super fast response on that one, because there wasn't any processing associated with the database variables

01:15:36.000 --> 01:15:44.000
right cool that's. going to save us from having to do a lot of causal logging, because we're just going to get those things back.

01:15:44.000 --> 01:15:59.000
And so, if you include Morgan as middleware on your express apps, you too, will get these developed developer, debugging type, style, messages, and all you need to do to set that up is bring in the morgan package

01:15:59.000 --> 01:16:10.000
like this, and then set it up as middleware like. So okay, in fact, that fleshes out

01:16:10.000 --> 01:16:24.000
Our use of this diagram. Finally, because now you can see when a request comes in, The first thing that happens is it runs the middleware.

01:16:24.000 --> 01:16:31.000
Then it does the routing find out which route callback is going to run.

01:16:31.000 --> 01:16:39.000
The case of our read, it actually pulled a value out of the database corresponding to the preabs.

01:16:39.000 --> 01:16:49.000
Id in that Url passed all that information off to the template which got assembled into a response which went back to the web client, and so on. Right?

01:16:49.000 --> 01:16:57.000
And so you can see, like the power of this diagram as an explanation tool and a way to ask questions like what happens between the route and the database.

01:16:57.000 --> 01:17:03.000
What happens within the database stuff, and so on. Excellent!

01:17:03.000 --> 01:17:17.000
Next up we want to get back to our code. we want to start adding routes to this thing.

01:17:17.000 --> 01:17:24.000
So far we've got read we'd like to have create we'd like to have update, and we'd like to have delete.

01:17:24.000 --> 01:17:44.000
Okay, So let's start with create in this case we are going to have a couple of routes actually first up.

01:17:44.000 --> 01:18:04.000
We're going to need a route breads new This is a get request means give me the form for which I would populate some value to send in to the database.

01:18:04.000 --> 01:18:11.000
So we have a path and a callback as Peru right.

01:18:11.000 --> 01:18:18.000
The callback is going to take request and response. Drop the cursor in between the curly braces. hit.

01:18:18.000 --> 01:18:21.000
Enter. This is Tabularasa Blake Slate.

01:18:21.000 --> 01:18:41.000
I get to type whatever code I want that I want to run to show this form that'll be res dot render, and we're going to use an ejs template for this and we'll call it new nicole go

01:18:41.000 --> 01:18:53.000
ahead. So if you're the coal back into this what power does Dick actually have.

01:18:53.000 --> 01:19:01.000
I don't I don't know how to make that make sense, but like waters get doing that's different from anything else.

01:19:01.000 --> 01:19:04.000
If you can put a call back that you could pay my apologies.

01:19:04.000 --> 01:19:08.000
I thought you had said Get when you said get and I think that that's an accent issue.

01:19:08.000 --> 01:19:13.000
So i'm gonna i'm catching up to the way that you say things.

01:19:13.000 --> 01:19:18.000
What power does this function call have what it's doing is it's, setting up an event.

01:19:18.000 --> 01:19:32.000
Listener of sorts on the event. loop. What kind of an event is it listening for a get request to slash bread new?

01:19:32.000 --> 01:19:37.000
If that ever happens, then this callback will run you're muted.

01:19:37.000 --> 01:19:45.000
But I assume for your head nods that you're all cool With that we get a little light bulb moment.

01:19:45.000 --> 01:19:49.000
Yeah, maybe yes, maybe no. i'm gonna keep going and come back to that point.

01:19:49.000 --> 01:20:04.000
A few few more times. Okay, So what this does is it sets up a new route such that the new egs template is gonna get rendered if we ever request that request.

01:20:04.000 --> 01:20:09.000
So i'll do this the other way this time down inside the Views Directory.

01:20:09.000 --> 01:20:14.000
We need a new ejs template. Make a new file!

01:20:14.000 --> 01:20:22.000
New Ejs right that's the name of the template. i'm gonna start it out again as the boilerplate.

01:20:22.000 --> 01:20:32.000
Html 5 stuff we'll call this with the title new here, and we're going to have inside here a form that we can populate with a new type of bread.

01:20:32.000 --> 01:20:51.000
So we'll start with a form tag that form tag is going to have an action and a method like, So the method is going to be a post.

01:20:51.000 --> 01:20:55.000
We're going to make a post request when this form gets submitted.

01:20:55.000 --> 01:21:01.000
We're going to submit it to slash breads Hmm!

01:21:01.000 --> 01:21:12.000
Slash new, but it's a post request I think that that's reasonable path for this form.

01:21:12.000 --> 01:21:31.000
Then inside this form we're gonna have few things let's have a label for, and the label is going to be type of bread.

01:21:31.000 --> 01:21:46.000
We're gonna have an input tag with an Id of type, so that the 4, the label and the input will be connected through that.

01:21:46.000 --> 01:21:54.000
Id. we're gonna have a name this input tag to also be type.

01:21:54.000 --> 01:22:09.000
We are going to have a type of this input tag to be of type text, because it's a text, input and I think that's it.

01:22:09.000 --> 01:22:20.000
For Now then, finally, we're gonna have another input that's going to be the submit.

01:22:20.000 --> 01:22:33.000
Button. The type will be submit Sorry The name will Be submit, but so will the type be submitted, and this one needs a value, because that's what shows up on the button.

01:22:33.000 --> 01:22:55.000
Submit, so that's a good starting place for our form let's see if our new route works all the time I was typing this. In fact, all the time I was typing this stuff in if I go back to my console

01:22:55.000 --> 01:23:01.000
log. it should show that it was restarting every time I saved my server Dot Js file.

01:23:01.000 --> 01:23:19.000
It restarted the server. I guess I say that only the ones. So now we should be able to go back to here and request slash breads new all right.

01:23:19.000 --> 01:23:23.000
There's a victory type of bread that's a label.

01:23:23.000 --> 01:23:34.000
This is a text input there's a submit button so bagel pumper nickel.

01:23:34.000 --> 01:23:38.000
Did we not put pumper nickel in I probably didn't want to type pumper nickel.

01:23:38.000 --> 01:23:43.000
Frankly. yeah It's not in There yet let's try I mean this is the idea Here, right?

01:23:43.000 --> 01:23:50.000
Is, we're going to be able to do for tell hopefully right now.

01:23:50.000 --> 01:23:57.000
If I click submit, this is interesting pumpernicle.

01:23:57.000 --> 01:24:07.000
Okay cannot post slash breads new. This is a message coming to us from express.

01:24:07.000 --> 01:24:11.000
Have you seen a similar message from before yeah when you didn't make a route.

01:24:11.000 --> 01:24:16.000
Guess many times people are nodding their heads. Yeah. So I, too, have now run into this error.

01:24:16.000 --> 01:24:21.000
I don't have a rep that corresponds to this path right So let's make one.

01:24:21.000 --> 01:24:31.000
This is going to be a post route to this path so let's go ahead and make that we go back to server about Js.

01:24:31.000 --> 01:24:38.000
And, in fact, it's part of our create right is the ability to accept this post request.

01:24:38.000 --> 01:24:46.000
So let's do this here. app dot post right takes a path and a callback.

01:24:46.000 --> 01:24:52.000
Let's put them both in blanks to that we can stay syntactically correct.

01:24:52.000 --> 01:25:13.000
Then go back in and populate the bits. This one is the path This one takes request and a response Object And now, inside our callback.

01:25:13.000 --> 01:25:22.000
From for this route we want to take in the form values and add it to our array of types.

01:25:22.000 --> 01:25:45.000
Very exciting, so it's going to be on the request right the request object is going to hold the stuff that we want the form values where it's going to be in rack Dot. body.

01:25:45.000 --> 01:26:11.000
Now let's console on this we're going to console log wreck dot body like So a label first, and then as a value. So we can see what r dot body looks like here's the thing form.

01:26:11.000 --> 01:26:20.000
Input is not going to show up in here until we add some more middleware dustin.

01:26:20.000 --> 01:26:35.000
Go ahead. Just curious if there's like particular way to decide where to post like the Url to post these form data to, or does it really not matter?

01:26:35.000 --> 01:26:43.000
Yeah, it's a good question. There is a rest Api convention where the where it would specify the paths

01:26:43.000 --> 01:26:51.000
And as we dig into the details of that you'll be able to see some more detailed answers for that So that's gonna be the real answer to your question.

01:26:51.000 --> 01:26:55.000
For now i'm happy just to pick this one sort of ad hoc!

01:26:55.000 --> 01:27:05.000
But when we get around to rest api's it'll specify the particular path that we want to use good question all right.

01:27:05.000 --> 01:27:15.000
Some middleware. I want to pull this out so inside the solution You'll. This is the code that's going to be shared with you guys.

01:27:15.000 --> 01:27:22.000
There's a couple of things in here this is one thing the body parser.

01:27:22.000 --> 01:27:30.000
So. in fact, I can grab the 2 lines i'm interested in that way.

01:27:30.000 --> 01:27:43.000
Grep in a case insensitive way. the word Parser from solution and server Dot js here are the 2 lines: I want body parsers being brought in as a package from Npm and then here's how

01:27:43.000 --> 01:27:52.000
the millware is set up as a separate life so i'm gonna go back now to my code put those lines in the right places.

01:27:52.000 --> 01:28:11.000
First up we've got that line which brings in the body parser packed kitch body parser is a bit of code that takes request, finds the header values inside that request and populates wreck body

01:28:11.000 --> 01:28:20.000
for you from those headers, so that's one line body parser like this.

01:28:20.000 --> 01:28:33.000
The second line was that one again. it's a bit of middleware, right app dot use, followed by a function call.

01:28:33.000 --> 01:28:50.000
This This actually is a callback that's how middleware actually works Morgan, the function Morgan with Dev passed in as a string, returns a callback, which is what app Dot us is taking so that callback is what's

01:28:50.000 --> 01:28:57.000
going to get executed for every request. Similarly, for this body, Parser Dot: Yeah.

01:28:57.000 --> 01:29:09.000
Url, encoded with extended false as a as an object being passed in returns in and of itself a callback that will get called for every request right.

01:29:09.000 --> 01:29:17.000
And so that's how the body parts works for every request it looks for stuff in the headers, and then populates recre body.

01:29:17.000 --> 01:29:35.000
If they're there. so with those 2 lines now, in place, and now we have a poster request on bread new we should be able to console log to wreck Dot body.

01:29:35.000 --> 01:29:49.000
Like. So let's just finish the request so response dot redirect 2.

01:29:49.000 --> 01:30:11.000
The homepage. So when we enter in a new bread type, pumper, nickel bagel whatever, then this route is going to run, it's just gonna console log for Now and then it's gonna

01:30:11.000 --> 01:30:18.000
redirect to the homepage afterwards okay, so we go back to here.

01:30:18.000 --> 01:30:26.000
Let's make sure that the node modules is running under Node Mon server will run listening on 3,333.

01:30:26.000 --> 01:30:44.000
Here is the homepage. Here is breads slash, new brings up the form tub for nickel.

01:30:44.000 --> 01:30:52.000
Submit went to the home page, so that's encouraging because it did what we told it to do.

01:30:52.000 --> 01:31:09.000
Let's check out here. super interesting stuff going on here because we've got Morgan running, which is telling us every time that a route gets requested right.

01:31:09.000 --> 01:31:22.000
The first one was the homepage next up was the get request to slash bread new that's the form that we typed our value into.

01:31:22.000 --> 01:31:30.000
When that farm was submitted we had a console log of wrecked body.

01:31:30.000 --> 01:31:39.000
Good thing. I put a label on my console log because I could tell which line of the console log output corresponded to that particular console.

01:31:39.000 --> 01:31:51.000
Long call right it's telling us that it's an object Wreck that body is an object that object has some values.

01:31:51.000 --> 01:32:03.000
Pumper, nickel, submit, submit. These are the formid puts that show up as properties of rack got body.

01:32:03.000 --> 01:32:11.000
And so I can use the properties of erect body to pluck out the values that I want to use.

01:32:11.000 --> 01:32:27.000
Should it have submit? Yes, because it's an input tag on the form, the input tags on the form get bundled up into the headers so that you could see it that allows you to have multiple buttons on your

01:32:27.000 --> 01:32:35.000
form, and you can tell which button was clicked lecture I'm. I'm.

01:32:35.000 --> 01:32:48.000
Wondering about that. the I think that that's the way that you can tell for multiple buzz and submissions I'm digging way back to years ago. when I did that with multiple buttons not important at this point let's

01:32:48.000 --> 01:32:52.000
try some tests with that, if you're super interested in multiple buttons on a form.

01:32:52.000 --> 01:32:59.000
But the important point is that we can certainly go after the type of bread we want to add to this array Right?

01:32:59.000 --> 01:33:05.000
And then that forward it redirected to the homepage.

01:33:05.000 --> 01:33:14.000
After the post request was made, went back to the homepage, and it processed another route.

01:33:14.000 --> 01:33:24.000
The get requests to slash, because the brain was the thing that was coached to induce the next request in the redirect.

01:33:24.000 --> 01:33:35.000
That's a super interesting data flow Right? the posters request actually responds to the browser and the browser initiates another request based on the redirect.

01:33:35.000 --> 01:33:50.000
Okay, So now we can actually use this value right it's going to be wreck dot body, and then they'll be a property called type on record body.

01:33:50.000 --> 01:34:02.000
So let's go back to here in This request we can push a new value onto bread types.

01:34:02.000 --> 01:34:13.000
The array right? , we have brad types the array dot push, and we're going to push a new value on to here.

01:34:13.000 --> 01:34:31.000
Wreck dot body dot we could figure out that that's the syntax that we wanted by looking at this rack-dot body is an object that has a property called type over here.

01:34:31.000 --> 01:34:37.000
Wreck. Dot body is an object that has a property called type.

01:34:37.000 --> 01:34:42.000
The value of that in our case was pumper nickel.

01:34:42.000 --> 01:34:48.000
The text string pumper nickel is going to get pushed onto the bread types here.

01:34:48.000 --> 01:34:53.000
So with that changed, This should have restarted my server.

01:34:53.000 --> 01:34:59.000
Sure enough it did. so. I go back to the browser.

01:34:59.000 --> 01:35:17.000
Breads, new type of bread, punker, nickel, pumper, nickel, submit back to the homepage breads. slash.

01:35:17.000 --> 01:35:34.000
Non. if I recall correctly one panic spelled in correctly, I'm sure of it. 2 Baghdad whoops 3 sourdough or pumper necklace.

01:35:34.000 --> 01:35:42.000
We have new data in our database, thanks to that for submission should celebrate the victories.

01:35:42.000 --> 01:35:56.000
Right? Okay, So if that's create we've created fine right, what do we got left to write for routes?

01:35:56.000 --> 01:36:05.000
Update and delete. Okay, update is clearly the more difficult of these 2.

01:36:05.000 --> 01:36:09.000
I'm gonna tackle it first to make sure we have time for it.

01:36:09.000 --> 01:36:21.000
The update route is going to be very very similar to the C create route pair here.

01:36:21.000 --> 01:36:28.000
We're going to need a form we're gonna need the ability to submit that form.

01:36:28.000 --> 01:36:37.000
So i'm actually going to copy and paste this to start with, then make tweaks to this as required for the update case.

01:36:37.000 --> 01:36:48.000
So a pace this in next. But I see a question Lucas asks.

01:36:48.000 --> 01:36:53.000
So when the server is closed, does the pumper.

01:36:53.000 --> 01:37:07.000
Nickel goes away from bread types absolutely it does right. because when you go back to okay, i'm gonna paste this. since I've got it in at the moment, we're gonna change our update routes when the server

01:37:07.000 --> 01:37:15.000
restarts line, 18 is going to run again, reset it to blank that to the rich.

01:37:15.000 --> 01:37:22.000
Whatever default values I had in here right we don't learn how to do persistent database work until week.

01:37:22.000 --> 01:37:31.000
5 of the boot camp. right? So back to the update route.

01:37:31.000 --> 01:37:43.000
I know right, Tony. Week 5 more on that later. Okay, So the update we need to have a a different form.

01:37:43.000 --> 01:37:59.000
We're not going to use slash bread slash new for update. Let's use slash bread slash edit, and the thing about editing is we need to know which one we're editing, so

01:37:59.000 --> 01:38:21.000
let's edit let's put in a token Id like this just the same way that we did with read right Now we want to pass that value into a new ejs template called edit.

01:38:21.000 --> 01:38:45.000
So let's set up our template variables equal to an object with a property called Id okay who remembers where the idea is stored rack dot.

01:38:45.000 --> 01:39:02.000
What perhaps. thank you, Dot. Id good so now that's going to be inside our template bars, and we just need to pass this in as a second parameter to res not render.

01:39:02.000 --> 01:39:10.000
So the Id is going to be available to us. Actually, we need more than just the Id.

01:39:10.000 --> 01:39:20.000
Now they think of it. What we really want is the text, so that we can populate that form to have the text.

01:39:20.000 --> 01:39:28.000
So let's pass in Id let's also pass in the actual text of that bread type.

01:39:28.000 --> 01:39:44.000
So equals bread types rack, dot crabs, dot Id like.

01:39:44.000 --> 01:39:51.000
So these template bars are going to be available inside the edit.

01:39:51.000 --> 01:40:05.000
Ejs template in fact. our edit ejs template is going to look a lot like the new one, because it's going to be a form right? So let's do this.

01:40:05.000 --> 01:40:11.000
I'm gonna command, c. for copy command v for paste vs. code.

01:40:11.000 --> 01:40:15.000
The editor makes me a new file that's a copy gives it this name: I'm.

01:40:15.000 --> 01:40:31.000
Going to rename it. edit. So this is now edit Dot ejs, let's change this title to edit here, and four-hour action.

01:40:31.000 --> 01:40:35.000
Well, yeah, Now we need to to update this form right?

01:40:35.000 --> 01:40:48.000
This had been effectively copy pasted from the other route we're gonna send this post request from this form to Breads edit Slash Colon.

01:40:48.000 --> 01:41:01.000
Id. So we're gonna make a new post request route that includes the Id on the Url.

01:41:01.000 --> 01:41:17.000
Okay. So now we have the same label and text input field and a submit button, right?

01:41:17.000 --> 01:41:30.000
One of the things I like to do is to make sure that the button on any form actually reflects the Verb that's being used from the user's point of view.

01:41:30.000 --> 01:41:38.000
Yeah. So let's change this to the word update just so that we'll see that word on the form instead.

01:41:38.000 --> 01:41:49.000
And now one last change. The input tag needs to have a predefined value, right.

01:41:49.000 --> 01:42:03.000
It needs to have a value set equal to the text of this particular red type that came in as a dynamic value into this Cjs template.

01:42:03.000 --> 01:42:10.000
It's going to have alligator clip like I was talking about before.

01:42:10.000 --> 01:42:20.000
This is going to be What was it type right remember that was the name?

01:42:20.000 --> 01:42:24.000
So, in fact, let's just make sure we see how these line up properly.

01:42:24.000 --> 01:42:31.000
We've got server on this side edit on this side. Let's split like that, and go back to server over here.

01:42:31.000 --> 01:42:40.000
So here are the update routes so far right we've got to app Dot.

01:42:40.000 --> 01:42:45.000
Get at slide breads, edit and an Id when we match this route.

01:42:45.000 --> 01:42:56.000
It's going to pluck out the Id and the type for that particular bread at that particular number, and it's gonna pass that information into the edit.

01:42:56.000 --> 01:43:12.000
Egs template, Id and type. And now these are available as template bars within the Ejs template.

01:43:12.000 --> 01:43:21.000
Over here this i'm seeing an error right away here form action slash bread, slash edit Colon.

01:43:21.000 --> 01:43:26.000
Id We don't want to put the literal text colon Id here.

01:43:26.000 --> 01:43:35.000
This needs to be a dynamic value. it needs to match the Id that was sent in as a dynamic value into the Ejs template.

01:43:35.000 --> 01:43:52.000
I need an alligator clip here, like so Id that's going to build this Html out with label input and output.

01:43:52.000 --> 01:44:08.000
Sorry label and 2 input tags this label goes with this particular input tag. The text value which will be set as a default value for that, for Field is going to be the type that came from it and then finally, the submit

01:44:08.000 --> 01:44:17.000
tag. Okay, so let's save that server is saved. This should have restarted it. did a few times, because I saved server a few times.

01:44:17.000 --> 01:44:22.000
Go back to here if i've got slash bread slash 4.

01:44:22.000 --> 01:44:33.000
Let's go for slash breads slash edit slash 2, check it out.

01:44:33.000 --> 01:44:39.000
This is our new ejs, Template in action, right?

01:44:39.000 --> 01:44:42.000
It had a pre-populated value for the form.

01:44:42.000 --> 01:44:49.000
Its submit. Button has the word update instead. cool.

01:44:49.000 --> 01:45:02.000
If I view source on this thing here we're seeing the Html source that came back from this get request right.

01:45:02.000 --> 01:45:08.000
That is, it shows our form, and it shows slash 2.

01:45:08.000 --> 01:45:13.000
That was the id that came in from that Url right?

01:45:13.000 --> 01:45:23.000
So the action here is going to be slash bread slash 2, and it's a post request and we've got type of bread.

01:45:23.000 --> 01:45:31.000
We've got a text field that has the look at that the pre-populated value that came in as the value of this text field.

01:45:31.000 --> 01:45:36.000
It was a dynamic piece of html that's what egs templates are for.

01:45:36.000 --> 01:45:44.000
Then finally the submit with update if I click this it's gonna find its route.

01:45:44.000 --> 01:45:48.000
Oh, is it it's not because we don't have a route yet that has the dynamic value on it.

01:45:48.000 --> 01:45:58.000
Yeah, okay, fine. We'll go back to the thing this is the route that we want to be able to pull that in.

01:45:58.000 --> 01:46:10.000
What's the of it slash, bread slash 2 that's what this one is going to be except the 2 needs to be dynamic.

01:46:10.000 --> 01:46:19.000
So we'll go Colon. Id for that save wrecked up body.

01:46:19.000 --> 01:46:31.000
Now, here, this is what we had before for where we want to change that value.

01:46:31.000 --> 01:46:36.000
We're not trying to push this as a new value onto this array anymore.

01:46:36.000 --> 01:46:43.000
Instead, we want to change the value down inside of bread types right?

01:46:43.000 --> 01:46:52.000
In fact, we're going to have bread tight rack got body dot.

01:46:52.000 --> 01:47:16.000
Actually it's wrecked preams dot Id isn't it right because the Id is coming in on the url rack got params dot Id equals rack dot body type.

01:47:16.000 --> 01:47:24.000
So that's the new business logic of this post request Does that make sense?

01:47:24.000 --> 01:47:34.000
Slash bread, slash, edit, slash 2 means that we want to change bread.

01:47:34.000 --> 01:47:39.000
Number 2, the the 2 index of the bread types array.

01:47:39.000 --> 01:47:52.000
So bread types of 2 is now going to be set to equal the value that came in off the form, wreck, dot, body, type like.

01:47:52.000 --> 01:47:58.000
So. and then it's going to redirect to the homepage like.

01:47:58.000 --> 01:48:03.000
So. all right, let's try this out that should have restarted.

01:48:03.000 --> 01:48:16.000
Yes, it did. back to here. Homepage is the homepage slash.

01:48:16.000 --> 01:48:30.000
Breads slash headit slash 2 bag at let's change this to bagel Update.

01:48:30.000 --> 01:48:35.000
Okay, it redirected us to the homepage Let's see if it worked.

01:48:35.000 --> 01:48:47.000
Slash threads, slash, love, that joke static and the one that we changed used to be bagette.

01:48:47.000 --> 01:48:59.000
Now it is Bagel. So the update took that's pretty cool. awesome.

01:48:59.000 --> 01:49:09.000
Yeah, gotta celebrate the victories. Now, back to the code before we do the delete.

01:49:09.000 --> 01:49:14.000
And I know we have 10 min left, so we're going to make this come in just under the wire.

01:49:14.000 --> 01:49:26.000
Here, there's another route that I would like to add and it's the browse route, and i'm gonna change the homepage to actually do the brows.

01:49:26.000 --> 01:49:31.000
So again, this is the difference between crud and and bread.

01:49:31.000 --> 01:49:37.000
Crud is create, read, update and delete.

01:49:37.000 --> 01:49:53.000
Bread has B for brows and it returns the whole list. So let's turn our homepage into a list of all our breads, and for that homepage has been requested Now we're gonna have a new

01:49:53.000 --> 01:50:10.000
Ejs template render hope and for the template variables for this homepage.

01:50:10.000 --> 01:50:33.000
We're gonna send in all the breads and so let's call this list breads that's the name of the property and template bars, and so the value is going to be the bread types.

01:50:33.000 --> 01:50:40.000
Array, but it's going to be called breads on the in the ejs template.

01:50:40.000 --> 01:50:43.000
I'm doing that on purpose. so that it shows you the difference between the 2 things.

01:50:43.000 --> 01:51:00.000
This is a property of the template bar's object it's going to show up as a it's going to show up as a variable on the other side. So we're going to pass that that value in here template bars

01:51:00.000 --> 01:51:08.000
Come on, Comma template bars. Okay, resident.

01:51:08.000 --> 01:51:20.000
Render home. We need a new home. template inside the Views Directory.

01:51:20.000 --> 01:51:31.000
New file home, Ejs. H. T. M. L. 5 boilerplate title home.

01:51:31.000 --> 01:51:46.000
Now welcome to welcome to the home page we'll set that up as an H.

01:51:46.000 --> 01:52:02.000
One link. Sorry, H. One tag like so and now we're going to have an alligator clip like we did before.

01:52:02.000 --> 01:52:14.000
If we do exactly like we did before it goes like this and I could say breads right, let's just see what happens here.

01:52:14.000 --> 01:52:25.000
I'm going to save that template go back to this it restarted the server because I had we saved that.

01:52:25.000 --> 01:52:30.000
Now, if I go to the homepage, I should pick up the new homepage.

01:52:30.000 --> 01:52:43.000
Nice. It actually rendered the whole array for that alligator click, Nan, Bannick Baggett, and sourdough.

01:52:43.000 --> 01:53:03.000
But I want to change this up a little bit want to make my own loop over these values instead of just showing it this way, and i'll show you what i'm on about next back to the code instead of out putting it that way I

01:53:03.000 --> 01:53:08.000
want to show you a different kind of alligator clip in this case.

01:53:08.000 --> 01:53:21.000
It's not going to include the equal sign and so instead i'm going to do something like this it's just Javascript.

01:53:21.000 --> 01:53:50.000
So 4 i'm gonna have a for loop like so and let's say, let I start out as and then for Ii less than n breads dot length right like the old C style loops plus plus then here

01:53:50.000 --> 01:54:20.000
i'm gonna close my alligator clip and Then open another alligator clip like So what that lets me do is to put Html in here.

01:54:21.000 --> 01:54:27.000
Think of it This way opening up the alligator clip like this puts me in Javascript mode.

01:54:27.000 --> 01:54:38.000
Now i'm writing text in javascript mode and then I close the alligator clip, which puts me back into html mode.

01:54:38.000 --> 01:54:50.000
And so from here onward I can type whatever html. I want, In fact, let's put in a span tag for the moment, and just put in the word monkey fuzz like this.

01:54:50.000 --> 01:55:02.000
So i'll save that like that then go back to the homepage.

01:55:02.000 --> 01:55:09.000
The server should have restarted maybe it didn't even need to, because i'm only changing the egs template, which gets reloaded every time.

01:55:09.000 --> 01:55:18.000
Anyway. reload, this, sure enough, there's my first with the alligator clip with the equals showing the whole array out.

01:55:18.000 --> 01:55:21.000
Then I have 1, 2, 3, 4 monkey fuzzes.

01:55:21.000 --> 01:55:36.000
That came because my loop went through 4 times. yeah So back to the code here, I would like this to be an actual list.

01:55:36.000 --> 01:55:57.000
So let's. do list item tags like so let's put and unordered list tag wrapped around the whole loop like So then, instead of monkey fuzz let's put and alligator

01:55:57.000 --> 01:56:03.000
clip and output alligator clip type that's what the equals?

01:56:03.000 --> 01:56:24.000
Does it just outputs the value. So we'll go for breads, square brackets, aye That's the value that I want to output.

01:56:24.000 --> 01:56:36.000
Right. So I save that reload and now we're really getting somewhere right now.

01:56:36.000 --> 01:56:46.000
We've got a loop over our data structure and We're able to produce Html for each individual would cool.

01:56:46.000 --> 01:56:55.000
I'm much happier with this I can get rid of this thing. That was just a bit of debugging, really right, save go back here reload.

01:56:55.000 --> 01:57:23.000
Got my list items like that right while we're at It Let's put a convenience link on the homepage to that route that allows us to add a new bread type a Href add type what was

01:57:23.000 --> 01:57:42.000
the path threads new, save that reload add type, brings us to the form pizza.

01:57:42.000 --> 01:57:49.000
Submit shows up straight away because my redirect was to the homepage.

01:57:49.000 --> 01:58:00.000
Much better user interface. Yeah. Now i'd like to have these be links to their respective edit pages.

01:58:00.000 --> 01:58:13.000
How are we going to do that? Well, the list item should be a link, a Hf.

01:58:13.000 --> 01:58:26.000
Equal to some thing. Right then the name itself is going to be the text inside the link, like so, and the path should be slash.

01:58:26.000 --> 01:58:38.000
Breads, slash, edit, slash, and then an alligator clip surrounding the value of the Id.

01:58:38.000 --> 01:58:45.000
Which in this case is ii it's the actual loop index.

01:58:45.000 --> 01:58:53.000
That's the in the particular Id so we'll save that go back to the page reload.

01:58:53.000 --> 01:59:06.000
It Now all my bread types are links, and if I hub her over each name, I got Ned at bannock at one bag, at 2 sour note at 3 pizza.

01:59:06.000 --> 01:59:15.000
The last one I entered at 4 should be able to click any one of these, and it's going to take me to the right route to changed the baget.

01:59:15.000 --> 01:59:24.000
2 punker nickel that's gonna be our new type of red around here.

01:59:24.000 --> 01:59:32.000
Okay, because I can't type the other one nickel It's like nickel back the band. Okay, that's a super bad joke, all right.

01:59:32.000 --> 01:59:39.000
Update you got conquer nickel pizza ad type.

01:59:39.000 --> 01:59:44.000
Okay, new type. Monkey Fuzz is now going to be a type of bread as of today.

01:59:44.000 --> 01:59:50.000
Submit shows up in our list right now it's an actual reasonable web app.

01:59:50.000 --> 01:59:54.000
I feel like It's like recording lists of breads for us.

01:59:54.000 --> 02:00:00.000
We have one more route. The delete route it's pretty straightforward actually to do this last one.

02:00:00.000 --> 02:00:06.000
I hope you'll leave me to just do this one last route.

02:00:06.000 --> 02:00:16.000
A couple more minutes of class here back to server dot Js give myself the giggles if i'm not careful.

02:00:16.000 --> 02:00:30.000
Okay, let's make it a get request to make it simple breads, slash delete slash Colon.

02:00:30.000 --> 02:00:40.000
Id We're gonna have a callback that takes request and response.

02:00:40.000 --> 02:00:55.000
Whoops like, so const Id equals requests dot per m dot Id like before.

02:00:55.000 --> 02:01:02.000
Now, can someone help me with the code to delete an individual array?

02:01:02.000 --> 02:01:22.000
Item out. I think it's something like this bread types I think it's just delete actually like so. and I think that's going to shift all the numbers around on us when we do that i'm mostly confident that this is the

02:01:22.000 --> 02:01:26.000
right. Syntax might take a bit of debugging right.

02:01:26.000 --> 02:01:44.000
And then, finally, what we want to do, a res dot redirect to the homepage, I should think, because if we do delete something successfully off of here, then it we should re-render the list.

02:01:44.000 --> 02:01:51.000
So there's the save go back to the page reload it.

02:01:51.000 --> 02:01:55.000
Okay, notice the server restarted so I lost my monkey fuzz bread type.

02:01:55.000 --> 02:02:03.000
Let's and it just to see that it's working sourdough.

02:02:03.000 --> 02:02:08.000
Get some explanation points on it because it's extra sour fine.

02:02:08.000 --> 02:02:21.000
Now we can, We crafted what is the Id on that 3 so let's go slash breads slash delete slash 3.

02:02:21.000 --> 02:02:33.000
It's just a get request right and enter it deleted it interesting that it deleted the value and left the index.

02:02:33.000 --> 02:02:43.000
So that's kind of problematic hmm i'll leave that as an exercise to this student, how to delete a value out of the middle of an array.

02:02:43.000 --> 02:02:52.000
Okay, let's leave it at that I know that your time is precious.

02:02:52.000 --> 02:02:57.000
Oh, spice, Id one thank you. We could drop that in

02:02:57.000 --> 02:03:27.000
And yeah, thanks for your attention and time. thanks for learning about all the parts of a back-end web server in express right middleware that runs for every request routing where you set up event listeners for any given route the

02:03:27.000 --> 02:03:33.000
database where your dynamic content is stored the way We've been handling.

02:03:33.000 --> 02:03:45.000
This is just to have an array like this it's getting reset every time The server restarts stay tuned for week 5.

02:03:45.000 --> 02:04:02.000
We're gonna dive into how to make this persistent, and how to use sequel in order to store our values in such a way that when you restart the server, it picks up all the latest edits from there it's just

02:04:02.000 --> 02:04:13.000
right code against each of the routes. and then make sure that your stuff gets debugged properly, so that you can actually pull an item out of an array.

02:04:13.000 --> 02:04:19.000
Res dot redirect is a way to finish a route to get it to restart another route again.

02:04:19.000 --> 02:04:24.000
Wicked. Okay, thanks. everybody. click like and subscribe.

02:04:24.000 --> 02:04:45.000
Hold my beer and watch this and we'll see you again tomorrow for more express and routes and web apps and the back end, and all that good stuff hang around.

